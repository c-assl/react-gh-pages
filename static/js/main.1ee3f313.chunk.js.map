{"version":3,"sources":["logo.svg","content.mdx","App.js","reportWebVitals.js","index.js"],"names":["Box","style","padding","backgroundColor","layoutProps","MDXContent","components","props","mdxType","parentName","color","isMDXComponent","App","className","src","logo","alt","to","path","About","Topics","Home","href","target","rel","match","useRouteMatch","url","Topic","topicId","useParams","optionnal_link","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAAe,G,MAAA,IAA0B,kC,qCCO5BA,EAAM,kBAAM,mBAAKC,MAAO,CACnCC,QAAS,GACTC,gBAAiB,aAGbC,EAAc,CAClBJ,OAGa,SAASK,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,6JACA,qBAAG,kBAAIC,WAAW,KAAf,gBAAH,6DACA,uDAAgC,sBAAQA,WAAW,KAAnB,YAAhC,SAAsF,oBAAMR,MAAO,CAC/FS,MAAO,SAD2E,OAAtF,uCAEwD,sBAAQD,WAAW,KAAnB,OAFxD,MAGA,yDAAqC,iBAAGA,WAAW,IAC/C,KAAQ,+CADyB,YAArC,sDAGA,YAAC,EAAD,CAAKD,QAAQ,OAAb,oDAKJH,EAAWM,gBAAiB,E,WCnBb,SAASC,IACtB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SAEzC,cAAC,IAAD,UACE,gCACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oCAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,yDAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,UAAT,0CAIJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,UAAZ,SACE,cAACE,EAAD,MAEF,cAAC,IAAD,CAAOF,KAAK,IAAZ,SACE,cAACG,EAAD,cAMR,mBACER,UAAU,WACVS,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,8BAaR,SAASH,IACP,OAAO,sDAGT,SAASF,IACP,OACA,gCACE,2EACA,cAAC,EAAD,OAKJ,SAASC,IACP,IAAIK,EAAQC,cAIZ,OACE,gCACE,yDAEA,+BACE,6BACE,cAAC,IAAD,CAAMT,GAAE,UAAKQ,EAAME,IAAX,UAAR,2IAGF,6BACE,cAAC,IAAD,CAAMV,GAAE,UAAKQ,EAAME,IAAX,UAAR,gFAcJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOT,KAAI,UAAKO,EAAMP,KAAX,aAAX,SACE,cAACU,EAAD,MAEF,cAAC,IAAD,CAAOV,KAAMO,EAAMP,KAAnB,SACE,8EAWV,SAASU,IACP,IAAIH,EAAQC,cAENG,EAAYC,cAAZD,QACFE,EAAiB,GAIrB,MAHkB,UAAd,CAACF,aAAwBE,EAAiB,uBAC9CC,QAAQC,IAAkB,UAAd,CAACJ,YAGX,gCACE,+CAAkBA,KAElB,6BACE,+BACE,cAAC,IAAD,CAAMZ,GAAG,IAAT,kCACA,eAAC,IAAD,CAAMA,GAAE,UAAKQ,EAAMP,KAAX,UAAR,cAAmCa,EAAnC,YAIJ,cAAC,IAAD,UACE,cAAC,IAAD,CAAOb,KAAK,IAAZ,SACE,cAACG,EAAD,WC9IV,IAYea,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1ee3f313.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const Box = () => <div style={{\n  padding: 30,\n  backgroundColor: 'tomato'\n}} />;\n\nconst layoutProps = {\n  Box\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Tu croyais en apprendre plus sur la manière dont le document de synthèse a été produit et comment tu peux l'exploiter ?`}</h1>\n    <p><em parentName=\"p\">{`Désolé`}</em>{` ici tu ne pourras que voir mes piètres tests avec MDX`}</p>\n    <p>{`Déjà je sais utiliser du `}<strong parentName=\"p\">{`markdown`}</strong>{` avec `}<span style={{\n        color: \"blue\"\n      }}>{`JSX`}</span>{` : il parait que ça s'appelle du `}<strong parentName=\"p\">{`MDX`}</strong>{` !`}</p>\n    <p>{`En tout cas j'ai visionné une `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=d2sQiI5NFAM\"\n      }}>{`vidéo`}</a>{` très sympathique à ce sujet cet aprèm :)`}</p>\n    <Box mdxType=\"Box\"> Et je tente des choses avec mon composant Box </Box>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import logo from './logo.svg';\nimport './App.css';\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\n/* eslint-disable import/no-webpack-loader-syntax */\nimport Content from '!babel-loader!@mdx-js/loader!./content.mdx'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <Router>\n          <div>\n            <ul>\n              <li>\n                <Link to=\"/\">Retour à bon port</Link>\n              </li>\n              <li>\n                <Link to=\"/about\">À propos de ce document de synthèse</Link>\n              </li>\n              <li>\n                <Link to=\"/topics\">Document de synthèse</Link>\n              </li>\n            </ul>\n\n            <Switch>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/topics\">\n                <Topics />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nfunction Home() {\n  return <h2>Retour à bon port</h2>;\n}\n\nfunction About() {\n  return (\n  <div>\n    <h2>À propos de ce document de synthèse</h2>\n    <Content />\n  </div>\n  );\n}\n\nfunction Topics() {\n  let match = useRouteMatch();\n\n  // je pense que je vais devoir faire une fonction \"Topic\" pour chaque axe qui me permettra mettre liens / routes en plus vers autre axe et / ou homepage\n  // elle est déjà faite (à voir si je l'adapte en 2 fonctions en fonction du topic id)\n  return (\n    <div>\n      <h2>Document de synthèse</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/axe_1`}>\n            Axe 1 : Le déclin / marginalisation de la région d’Aunis-Poitou-Saintonge au sein de l’ensemble français</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/axe_2`}>\n            Axe 2 : La Rochelle : un port dominant mais pas structurant ?\n          </Link>\n        </li>\n      </ul>\n\n      {/* The Topics page has its own <Switch> with more routes\n          that build on the /topics URL path. You can think of the\n          2nd <Route> here as an \"index\" page for all topics, or\n          the page that is shown when no topic is selected */\n          \n        /* J'ai changé la page Topics par une page 'Document de synthèse' \n           qui contient plusieurs axes de recherche (et pas plusieurs Topic)*/\n      }\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Veuillez choisir un axe de recherche</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\n// je pense que je vais définir dans fichiers externes = components tels qu'ils devraient être,\n// et en fonction du topic ID je vois ce que je donne comme component (Axe1 ou Axe 2 ?)\n// pour l'instant je tente d'afficher un titree non null au lien que si on est sur la page axe 1, ce n'est pas la bonne manière de faire, en tout cas ça ne fonctionne pas\n\nfunction Topic() {\n  let match = useRouteMatch(); \n\n  let { topicId } = useParams();\n  let optionnal_link = \"\";\n  if ({topicId} === 'axe_1') { optionnal_link = \"Passer à l'axe 2\"}; \n  console.log({topicId} === 'axe_1');\n\n  return (\n    <div>\n      <h3>Axe choisi : {topicId}</h3> \n      \n      <ul>\n        <li>\n          <Link to=\"/\">Retour à bon port</Link>\n          <Link to={`${match.path}/axe_2`}> {optionnal_link} </Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}